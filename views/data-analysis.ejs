<html>
    <head>
        <link rel="stylesheet" href="/libs/bootstrap.min.css">
        <link rel="stylesheet" href="/libs/bootstrap-icons-1.11.3/font/bootstrap-icons.min.css">
        <link rel="stylesheet" href="/global.css">
        <link rel="icon" type="image/png" href="/g3.png">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="/libs/jquery-3.7.1.min.js"></script>
        <script src="/js/global.js"></script>
        <title>G3 Scouting!</title>
    </head>

    <%- nav %>

    <div id="main">

        <h1>Welcome to the team analyzer!</h1>

        <div id="inline">
            <input class="text-input form-control" id="search-team" style="width: 150px;" type="text" placeholder="Team Number">&nbsp;
            <select id="search-select" class="form-select">
                <option disabled selected>Sheet</option>
                <% for (let i=0; i < sheets.length; i++) { %>
                    <option value="<%= sheets[i] %>"><%= sheets[i] %></option>
                <% } %>
            </select>&nbsp;
            <button class="btn btn-primary" id="search">Go!</button>
        </div><br><br>

        <div id="inline">
            <select id="select-col" class="form-select">
                <option disabled selected>Field</option>
                <% for (x=0; x < info.cols.length; x++) { %>
                    <option value="<%= x+2 %>">
                            <%= info.cols[x] %>
                    </option>
                <% } %>
            </select>&nbsp;
            <select id="select-mode" class="form-select">
                <option disabled selected>Action</option>
                <option value="0">Count</option>
                <option value="1">Add</option>
                <option value="2">Average</option>
            </select>&nbsp;
            <button onclick="getColumn()" class="btn btn-primary">Search!</button>&nbsp;
        </div>

        <br><br>
        
        <div style="width: 100%;" id="results">
            <table style="width: 50%; height: 100%;" class="table">
                <thead style="font-weight: bold;">
                    <tr>
                        <td>Item</td>
                        <td>Number of occurances</td>
                        <td>Percent of total</td>
                    </tr>
                </thead>
                <tbody id="result"></tbody>
            </table>&nbsp;&nbsp;&nbsp;
            <div class="chart-container">
                <canvas id="chart"></canvas>
            </div>
        </div>
        <h2 id="result-text"></h2>
        <br><br>

        <table class="table table-hover table-bordered" id="data-table">
            <thead>
                <tr style="font-weight: bold;">
                    <th style="width: 10px;">

                    </th>
                    <% for (x=0; x < info.cols.length; x++) { %>
                        <th scope="col">
                                <%= info.cols[x] %>
                        </th>
                    <% } %>
                </tr>
            </thead>
            <tbody>
                <% for(i = 0; i < info.rows.length; i++) { %>
                    <tr id="row-<%= i %>">
                        <td class="trash">
                            <i class="bi bi-trash-fill"></i>
                        </td>
                        <% for (x=0; x < info.cols.length; x++) { %>
                            <td style="white-space: nowrap;">        
                                <% if (info.rows[i].findIndex(p => p.name == info.cols[x]) > -1) { %>
                                    <%= info.rows[i][info.rows[i].findIndex(p => p.name == info.cols[x])].value %> 
                                <% } %>
                            </td>
                        <% } %>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</html>

<script>$("#nav-data").addClass("active")</script>

<script>

    const customColorPlugin = {
        id: 'customCanvasBackgroundColor',
        beforeDraw: (chart, args, options) => {
            const {ctx} = chart;
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = options.color || '#99ffff';
            ctx.fillRect(0, 0, chart.width, chart.height);
            ctx.restore();
        }
    };

    $('#search-team').keypress(function(event){
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if(keycode == '13'){
            window.location.href = "?team=" + $("#search-team").val() + "&sheet=" + $("#search-select").val()
        }
    });

    $("#search").click(function(){
        window.location.href = "?team=" + $("#search-team").val() + "&sheet=" + $("#search-select").val()
    })

    $("#result-text").hide()
    $("#results").hide()

    let chart = new Chart(document.getElementById('chart'), {
        type: 'bar',
        data: {
            labels: ['one'],
            datasets: [{
                label: '# of occurances',
                data: ['1'],
                borderWidth: 1
            }]
        },
        options: {
            maintainAspectRatio: false,
            plugins: {
                customCanvasBackgroundColor: {
                    color: 'rgba(255, 255, 255, 0.99)'
                }
            }
        },
        plugins: [customColorPlugin]
    });

    function getColumn() {
        var items=[]
        const action = $("#select-mode").val()
        const number = $("#select-col").val()

        $(`#data-table tbody tr td:nth-child(${number})`).each(function(){
            items.push($(this).text());       
        });

        if (action == 1) {
            $("#results").hide()
            $("#result-text").show()
            let realItems = [];
            for (let i = 0; i < items.length; i++) {
                if (!Number.isNaN(parseInt(items[i]))) {
                    realItems.push(parseInt(items[i]))
                }
            }
            $("#result-text").text("Result: " + (realItems.reduce((t, c) => t + c)))
            return items;
        } else if (action == 0) {
            let allItems = [], fields = [], values = [], totalOccurances = 0;
            const uItems = [...new Set(items)]
            for (let i = 0; i < uItems.length; i++) {
                if (uItems[i].trim() != "") {
                    const number = items.filter((x) => x == uItems[i]).length
                    fields.push(uItems[i].trim())
                    values.push(number)
                    totalOccurances += number
                }
            }
            for (let i = 0; i < uItems.length; i++) {
                if (uItems[i].trim() != "") {
                    const number = items.filter((x) => x == uItems[i]).length
                    allItems.push({field: uItems[i].trim(), number: number, percent: Math.round(number / totalOccurances * 100)})
                }
            }
            $("#result").html("")
            $("#results").show()

            console.log(values, fields)

            const layout = {
                width: 500,
                height: 200,
                margin: {
                    "t": 0, "b": 0, "l": 20, "r": 0
                }
            }

            chart.data.labels = fields;
            chart.data.datasets[0].data = values;
            chart.update()
 
            $("#result-text").hide()
            for (let i = 0; i < allItems.length; i++) {
                $("#result").append(`<tr><td>${allItems[i].field}</td> <td>${allItems[i].number}</td> <td>${allItems[i].percent}%</td></tr>`)
            }
            return allItems;
        } else if (action == 2) {
            $("#results").hide()
            $("#result-text").show()
            let realItems = [];
            for (let i = 0; i < items.length; i++) {
                if (!Number.isNaN(parseInt(items[i]))) {
                    realItems.push(parseInt(items[i]))
                }
            }
            $("#result-text").text("Average: " + Math.round(realItems.reduce((t, c) => t + c) / realItems.length * 1000) / 1000)
        }

    }
</script>

<style>

    #results {
        display: inline-flex;
        height: fit-content;
    }

    #inline {
        display: inline-flex;
    }

    a {
        text-decoration: none;
    }

    #main {
        margin: 20px;
    }

    #main h1 {
        font-size: 60px;
    }

    body {
        background-color: 
    }

    a {
        color: black;
        font-size: large;
    }

    .head-buttons a {
        text-decoration: none;
    }

    .chart-container {
        position: relative;
        margin: auto;
        height: 300px;
        width: 50vw;
    }
</style>    